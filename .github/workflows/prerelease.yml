name: prerelease

on:
  release:
    types: [ prereleased ]

jobs:
  package:
    name: Build and Package
    runs-on: ubuntu-20.04

    outputs:
      version: ${{ steps.version.outputs.value }}

    steps:
    - uses: actions/checkout@v2

    - name: Version
      id: version
      run: echo ::set-output name=value::${ cat VERSION }

    - name: Setup Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: '3.7'

    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install wheel

    - name: Build package
      run: make package version=${{ steps.version.outputs.value }}

    - name: Upload Pipeline Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: built-artifacts
        path: dist/
    
  upload-assets:
    name: Upload Assets to Release
    runs-on: ubuntu-20.04

    needs: package

    steps:
    - uses: actions/download-artifact@v2
      with:
        name: built-artifacts

    - name: Upload release assets
      uses: AButler/upload-release-assets@v2.0
      with:
        files: 'dist/*'
        repo-token: ${{ secrets.ACCESS_TOKEN }}
        release-tag: ${{ needs.package.outputs.version }}

  publish-pypi:
    name: Publish packages to PyPi
    runs-on: ubuntu-20.04

    needs: package

    steps:
    - uses: actions/download-artifact@v2
      with:
        name: built-artifacts
        path: dist/

    - name: Publish a Python distribution to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
